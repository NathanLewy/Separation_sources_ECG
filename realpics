import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import struct
from scipy.signal import find_peaks
import wfdb





# Choose simulation
'''
0	Baseline (no events) + noise
1	Foetal movement + noise
2	MHR /FHR acceleration / decelerations + noise
3	Uterine contraction + noise
4	Ectopic beats (for both foetus and mother) + noise
5	Additional NI-FECG (twin pregnancy) + noise


XX	=	simulated pregnancy number [01 to 10].
YY	=	SNR level [00, 03, 06, 09, 12] dB.
Z	=	repetition number [1 to 5].
WW	=	[c0 to c5], or empty for the baseline case, representing the cases shown in the above section.
VVVV	=	Fetal ECG [fecgN] where N is the fetus number, maternal ECG [mecg], or [noise].


.hea for header files
.dat for signal files. 
.qrs give machine generated QRS locations of their respective signals.
channels 1 to 32 are the abdominal FECG channels
channels 33 to 34 are the maternal reference ECG channels.
'''

XX  = '01'
YY = '09'
Z = '4'
WW = 'c0'

def extract_signal(xx, yy, z, ww, vvvv):
        if ww == '':
            filename = 'sub'+xx+'_snr'+yy+'dB_l'+z+'_'+vvvv
        else:   
            filename = 'sub'+xx+'_snr'+yy+'dB_l'+z+'_'+ww+'_'+vvvv
        filename = filename
        # Set working directory
        os.chdir('D:\\datacset_ecg\\fetal-ecg-synthetic-database-1.0.0' + '\\sub'+xx+'\\snr'+yy+'dB')
        # Load data
        filepath = os.getcwd()+'\\'+filename
        # Ouvrir le fichier en mode binaire
        # Lire le fichier d'annotations .qrs
        # Supposons que chaque annotation soit un entier de 4 octets (à ajuster en fonction du format exact)
        # Ouvrir le fichier en mode binaire
        record = wfdb.rdann(filepath, 'qrs')  # Charge les annotations QRS

        # Afficher les premières annotations
        print(record.sample)  # Affiche les indices d'échantillons pour les annotations
        print(record.symbol)


# Load data
data_fecg = extract_signal(XX, YY, Z, WW, 'fecg1')
#data_fecg_twin = extract_signal(XX, YY, Z, WW, 'fecg2')
data_mecg = extract_signal(XX, YY, Z, WW, 'mecg')
#data_noisem = extract_signal(XX, YY, Z, WW, 'noise1')
#data_noisef = extract_signal(XX, YY, Z, WW, 'noise2')


#signal to process
f_ech = 250 #Hz
T = 100 #s
N_ech = f_ech*T
N_signaux = 34

print(data_fecg)

